import { useSheetStore } from '~/stores/sheet-store-optimized'

export function useUniverWorker() {
  console.log('üîÑ [useUniverWorker] –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
  const sheetStore = useSheetStore()
  const batchQueue = ref<Array<{
    type: 'create' | 'update'
    data: any
    row: number
    listName: string
    timestamp: number
  }>>([])

  const batchTimeout = ref<ReturnType<typeof setTimeout> | null>(null)
  const BATCH_DELAY = 300
  const MAX_BATCH_SIZE = 20

  const isDtoChanged = (existing: any, incoming: any): boolean => {
    if (!existing) {
      console.log('üîç [useUniverWorker.isDtoChanged] —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã');
      return true;
    }
    for (const key of Object.keys(incoming)) {
      const newVal = String(incoming[key] ?? '').trim()
      const oldVal = String(existing[key] ?? '').trim()
      if (newVal !== oldVal) {
        console.log(`üîç [useUniverWorker.isDtoChanged] –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ "${key}": "${oldVal}" -> "${newVal}"`);
        return true;
      }
    }
    console.log('üîç [useUniverWorker.isDtoChanged] –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
    return false;
  }

  const queueBatchOperation = (
    type: 'create' | 'update',
    data: any,
    row: number,
    listName: string
  ) => {
    console.log('üì• [useUniverWorker.queueBatchOperation] –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å:', { type, row, listName, data });
    
    const last = batchQueue.value.at(-1)
    if (
      last &&
      last.type === type &&
      last.row === row &&
      last.listName === listName &&
      JSON.stringify(last.data) === JSON.stringify(data)
    ) {
      console.log('üîÅ [useUniverWorker.queueBatchOperation] –¥—É–±–ª–∏–∫–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    batchQueue.value.push({
      type,
      data,
      row,
      listName,
      timestamp: Date.now()
    })

    console.log(`üìä [useUniverWorker.queueBatchOperation] —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: ${batchQueue.value.length}`);

    if (batchTimeout.value) {
      console.log('‚è∞ [useUniverWorker.queueBatchOperation] –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞');
      clearTimeout(batchTimeout.value);
    }

    if (batchQueue.value.length >= MAX_BATCH_SIZE) {
      console.log('üöÄ [useUniverWorker.queueBatchOperation] –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
      processBatch();
      return;
    }

    console.log(`‚è≥ [useUniverWorker.queueBatchOperation] —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ ${BATCH_DELAY}ms`);
    batchTimeout.value = setTimeout(() => {
      console.log('‚è∞ [useUniverWorker.queueBatchOperation] —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞');
      processBatch();
    }, BATCH_DELAY)
  }

  const processBatch = async () => {
    console.log('üîÑ [useUniverWorker.processBatch] –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞');
    if (batchQueue.value.length === 0) {
      console.log('‚ÑπÔ∏è [useUniverWorker.processBatch] –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞');
      return;
    }

    const currentBatch = [...batchQueue.value];
    batchQueue.value = [];
    batchTimeout.value = null;
    
    console.log(`üì¶ [useUniverWorker.processBatch] –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${currentBatch.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);

    const grouped = currentBatch.reduce((acc, op) => {
      const key = `${op.listName}_${op.type}`
      if (!acc[key]) acc[key] = []
      acc[key].push(op)
      return acc
    }, {} as Record<string, typeof currentBatch>)

    console.log('üìä [useUniverWorker.processBatch] —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', Object.keys(grouped));

    try {
      for (const [key, ops] of Object.entries(grouped)) {
        const [listName, type] = key.split('_') as [string, 'create' | 'update']
        console.log(`üîÑ [useUniverWorker.processBatch] –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: ${key}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ops.length}`);

        if (type === 'create') {
          console.log('‚ûï [useUniverWorker.processBatch] CREATE –æ–ø–µ—Ä–∞—Ü–∏–∏');
          const createDtos = ops.map(op => op.data);
          console.log('üìù [useUniverWorker.processBatch] CREATE DTOs:', createDtos);
          // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: await sheetStore.addRecords(createDtos)
          console.log('‚úÖ [useUniverWorker.processBatch] CREATE –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)');
        }

        if (type === 'update') {
          console.log('‚úèÔ∏è [useUniverWorker.processBatch] UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏');
          const uniqueMap = new Map<number, any>();
          for (const op of ops) {
            const id = Number(op.data?.id);
            if (!Number.isFinite(id)) {
              console.warn('‚ö†Ô∏è [useUniverWorker.processBatch] UPDATE: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:', op.data?.id);
              continue;
            }
            const current = sheetStore.records[op.listName]?.find(r => r.id === id);
            if (isDtoChanged(current, op.data)) {
              console.log(`üîÑ [useUniverWorker.processBatch] UPDATE: –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–ª—è ID ${id}`);
              uniqueMap.set(id, op.data);
            } else {
              console.log(`üîÅ [useUniverWorker.processBatch] UPDATE: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–ª—è ID ${id}`);
            }
          }
          const finalUpdates = Array.from(uniqueMap.values());
          console.log(`üìù [useUniverWorker.processBatch] —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ UPDATEs: ${finalUpdates.length}`);
          if (finalUpdates.length > 0) {
            // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: await sheetStore.updateRecords(finalUpdates)
            console.log('‚úÖ [useUniverWorker.processBatch] UPDATE –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)');
          } else {
            console.log('‚ÑπÔ∏è [useUniverWorker.processBatch] –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è UPDATE');
          }
        }
      }
    } catch (e) {
      console.error('‚ùå [useUniverWorker.processBatch] –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞:', e);
    } finally {
      console.log('‚úÖ [useUniverWorker.processBatch] –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }

  const handleRowChangeOptimized = async (
    row: number,
    col: number,
    rowVals: any[],
    listName: string,
    idStr: string,
    buildSR: (rowVals: any[], listName: string, id?: number) => any
  ) => {
    console.log('üîÑ [useUniverWorker.handleRowChangeOptimized] –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:', {
      row, col, listName, idStr, rowVals
    });

    if (!idStr) {
      console.log('‚ûï [useUniverWorker.handleRowChangeOptimized] CREATE –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å');
      const createDto = buildSR(rowVals, listName);
      console.log('üìù [useUniverWorker.handleRowChangeOptimized] CREATE DTO:', createDto);
      queueBatchOperation('create', createDto, row, listName);
    } else {
      const idNum = Number(idStr);
      if (Number.isFinite(idNum) && idNum > 0) {
        console.log(`‚úèÔ∏è [useUniverWorker.handleRowChangeOptimized] UPDATE —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ ID: ${idNum}`);
        let updateDto = { ...buildSR(rowVals, listName, idNum), id: idNum };
        console.log('üìù [useUniverWorker.handleRowChangeOptimized] UPDATE DTO:', updateDto);
        queueBatchOperation('update', updateDto, row, listName);
      } else {
        console.warn('‚ö†Ô∏è [useUniverWorker.handleRowChangeOptimized] –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:', idStr);
      }
    }
  }

  const cleanup = () => {
    console.log('üßπ [useUniverWorker.cleanup] –æ—á–∏—Å—Ç–∫–∞');
    if (batchTimeout.value) {
      console.log('‚è∞ [useUniverWorker.cleanup] –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞');
      clearTimeout(batchTimeout.value);
      batchTimeout.value = null;
    }
    if (batchQueue.value.length > 0) {
      console.log(`üì¶ [useUniverWorker.cleanup] –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${batchQueue.value.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      processBatch();
    }
  }

  return {
    handleRowChangeOptimized,
    queueBatchOperation,
    processBatch,
    cleanup
  }
}