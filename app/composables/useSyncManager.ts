import { useSheetStore } from "~/stores/sheet-store-optimized";

type OperationType = 'create' | 'update' | 'delete'

interface SyncOperation {
    type: OperationType
    dto?: any 
    listName: string 
    rowIndex: number 
    id?: number 
    tempId?: number 
}

const pendingOps = new Set<string>()

function getOpKey(op: SyncOperation) {
    return `${op.type}::${op.listName}::${op.id ?? op.tempId ?? op.rowIndex}`
}

export function useSyncManager() {
    console.log('üîÑ [useSyncManager] –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    const store = useSheetStore() 

    const hasRecord = (listName: string, id: number) => {
        const exists = store.records[listName]?.some(r => Number(r.id) === id);
        console.log(`üîç [useSyncManager.hasRecord] listName=${listName}, id=${id}, exists=${exists}`);
        return exists;
    }

    const perform = async (op: SyncOperation) => {
        console.log('üöÄ [useSyncManager.perform] –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏:', op);
        const key = getOpKey(op)
        if (pendingOps.has(key)) {
            console.log('‚è≥ [useSyncManager.perform] –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', key);
            return;
        }
        pendingOps.add(key)

        try {
           if (op.type === 'create') {
            console.log('‚ûï [useSyncManager.perform] CREATE –æ–ø–µ—Ä–∞—Ü–∏—è');
            if (!op.dto) {
                console.warn('‚ö†Ô∏è [useSyncManager.perform] CREATE: –Ω–µ—Ç dto');
                return;
            }
            
            const tempId = -Math.abs(Date.now() + op.rowIndex);
            console.log('üìù [useSyncManager.perform] CREATE —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω tempId:', tempId);
            // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: store.addRecords([{ ...op.dto, tempId }])
            // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: store.anchorCreateRow(op.listName, op.rowIndex)
            console.log('‚úÖ [useSyncManager.perform] CREATE –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)');
           } 

           if (op.type === 'update') {
            console.log('‚úèÔ∏è [useSyncManager.perform] UPDATE –æ–ø–µ—Ä–∞—Ü–∏—è');
            if (!op.dto || !op.id) {
                console.warn('‚ö†Ô∏è [useSyncManager.perform] UPDATE: –Ω–µ—Ç dto –∏–ª–∏ id');
                return;
            }

            const existing = store.records[op.listName]?.find(r => r.id === op.id);
            if (!existing) {
                console.warn('‚ö†Ô∏è [useSyncManager.perform] UPDATE: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const changed = Object.keys(op.dto).some(
                k => String(op.dto[k]) !== String(existing[k])
            );
            if (!changed) {
                console.log('üîÅ [useSyncManager.perform] UPDATE: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
                return;
            }

            console.log('üìù [useSyncManager.perform] UPDATE –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º');
            // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: await store.updateRecords([{ ...op.dto, id: op.id }])
            console.log('‚úÖ [useSyncManager.perform] UPDATE –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)');
           }

           if (op.type === 'delete') {
            console.log('üóëÔ∏è [useSyncManager.perform] DELETE –æ–ø–µ—Ä–∞—Ü–∏—è');
            if (!op.id) {
                console.warn('‚ö†Ô∏è [useSyncManager.perform] DELETE: –Ω–µ—Ç id');
                return;
            }
            const exists = hasRecord(op.listName, op.id);
            if (!exists) {
                console.warn('‚ö†Ô∏è [useSyncManager.perform] DELETE: –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }
            console.log('üìù [useSyncManager.perform] DELETE —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å:', op.id);
            // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: await store.deleteRecords([op.id])
            console.log('‚úÖ [useSyncManager.perform] DELETE –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)');
           }
        } catch (e) {
            console.error('‚ùå [useSyncManager.perform] –æ—à–∏–±–∫–∞:', e)
        } finally {
            pendingOps.delete(key)
            console.log('üßπ [useSyncManager.perform] –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫–ª—é—á —É–¥–∞–ª–µ–Ω:', key);
        }
    }

    return { perform }
}